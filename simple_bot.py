import os
from datetime import datetime

from dotenv import load_dotenv

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
)

load_dotenv()


ASK_NAME, ASK_AGE = range(2)

menu_keyboard = [
    [KeyboardButton("üì∑ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ")],
    [KeyboardButton("üìé –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç")],
    [KeyboardButton("üåç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é")],
    [KeyboardButton("‚ùå –í–∏–π—Ç–∏")]
]

reply_markup = ReplyKeyboardMarkup(
    keyboard=menu_keyboard,
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=reply_markup
    )


async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì∑ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ":
        context.user_data["next_action"] = "photo"
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ üì∑")
    elif text == "üìé –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç":
        context.user_data["next_action"] = "doc"
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç üìé")
    elif text == "üåç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é":
        context.user_data["next_action"] = "location"
        await update.message.reply_text("–ü–æ–¥—ñ–ª–∏—Å—å –ª–æ–∫–∞—Ü—ñ—î—é üåç")
    elif text == "‚ùå –í–∏–π—Ç–∏":
        await update.message.reply_text("–ú–µ–Ω—é –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ. –ù–∞–ø–∏—à–∏ /start, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.", reply_markup=None)
    else:
        await update.message.reply_text("–Ø –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –¥—ñ—é ü§ñ")


# 1. Start ‚Äì start conversation
async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello! What is your name?")
    return ASK_NAME


# 2. Step 1 ‚Äì Get name
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–°—É–ø–µ—Ä! –ê —Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    return ASK_AGE


# 3. Step 2 ‚Äì get age and give response
async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get("name")
    age = update.message.text
    await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, {name}! –¢–æ–±—ñ {age} —Ä–æ–∫—ñ–≤.")
    return ConversationHandler.END


# 4. Canceling
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—ñ–∞–ª–æ–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("next_action") == "photo":
        photo = update.message.photo[-1]  # last photo in list
        file = await photo.get_file()
        filename = datetime.now().strftime("photo_%Y%m%d_%H%M%S.jpg")

        save_dir = "media"
        os.makedirs(save_dir, exist_ok=True)

        save_path = os.path.join(save_dir, filename)
        await file.download_to_drive(save_path)
        await update.message.reply_text("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        await update.message.reply_text("üì∏ –î—è–∫—É—é –∑–∞ —Ñ–æ—Ç–æ!")
        context.user_data["next_action"] = None
    else:
        await update.message.reply_text("–Ø –Ω–µ —á–µ–∫–∞–≤ —Ñ–æ—Ç–æ ü§î")



async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("next_action") == "doc":
        doc = update.message.document
        file = await doc.get_file()
        original_name = doc.file_name or "unnamed"
        name, ext = os.path.splitext(original_name)
        name = name.replace(" ", "_")
        ext = ext.lstrip(".")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{name}_{timestamp}.{ext}"

        save_dir = "docs"
        os.makedirs(save_dir, exist_ok=True)

        save_path = os.path.join(save_dir, filename)
        await file.download_to_drive(save_path)
        await update.message.reply_text("üìé –û—Ç—Ä–∏–º–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç!")
        await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {filename}!")
        context.user_data["next_action"] = None
    else:
        await update.message.reply_text("–Ø –Ω–µ —á–µ–∫–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç ü§î")


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("next_action") == "location":
        location = update.message.location
        await update.message.reply_text(f"üåç –¢–≤–æ—è –ª–æ–∫–∞—Ü—ñ—è:\n–®–∏—Ä–æ—Ç–∞: {location.latitude}\n–î–æ–≤–≥–æ—Ç–∞: {location.longitude}")
        context.user_data["next_action"] = None
    else:
        await update.message.reply_text("–Ø –Ω–µ —á–µ–∫–∞–≤ —Ñ–æ—Ç–æ ü§î")


async def say_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args

    if args:
        text = " ".join(args)
        return await update.message.reply_text(f"–¢–∏ —Å–∫–∞–∑–∞–≤: {text}")
    else:
        return await update.message.reply_text(
            "‚ùóÔ∏è–ù–∞–ø–∏—à–∏ —â–æ—Å—å –ø—ñ—Å–ª—è /say. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /say –ü—Ä–∏–≤—ñ—Ç"
        )


async def tf_upper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args

    if args:
        text = " ".join(args)
        return await update.message.reply_text(text.upper())
    else:
        return await update.message.reply_text(
            "‚ùóÔ∏è–ù–∞–ø–∏—à–∏ —â–æ—Å—å –ø—ñ—Å–ª—è /tf. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /tf –ø—Ä–∏–≤—ñ—Ç"
        )


async def start_with_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data="about")],
        [InlineKeyboardButton("‚ùìÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
        [InlineKeyboardButton("üì§ –ï—Ö–æ", callback_data="echo")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîò –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "about":
        await query.edit_message_text("ü§ñ –¶–µ –±–æ—Ç –°—Ç–µ–ø–∞–Ω–∞ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è.")
    elif data == "help":
        await query.edit_message_text("‚ùì –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø–∏—à–∏ –º–µ–Ω—ñ.")
    elif data == "echo":
        await query.edit_message_text("üì§ –ù–∞–ø–∏—à–∏ —â–æ—Å—å, —ñ —è –ø–æ–≤—Ç–æ—Ä—é –π–æ–≥–æ.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø –º–æ–∂—É –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —Ç–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ø–æ—á–∞—Ç–∏\n"
        "/help - –¥–æ–ø–æ–º–æ–≥–∞\n"
        "/about - –ø—Ä–æ –±–æ—Ç–∞"
    )


async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –Ø –ø—Ä–æ—Å—Ç–∏–π Telegram-–±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –°—Ç–µ–ø–∞–Ω–æ–º –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è.\n"
        "–ü–∏—à—É –Ω–∞ Python –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ python-telegram-bot!"
    )


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)


def main():
    app = ApplicationBuilder().token(os.getenv("TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("survey", start_conversation)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # commands
    app.add_handler(conv_handler)

    # app.add_handler(CommandHandler("start", echo))
    app.add_handler(CommandHandler("start", start_menu))
    app.add_handler(CommandHandler("say", say_command))
    app.add_handler(CommandHandler("tf", tf_upper))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about_command))
    app.add_handler(CommandHandler("menu", start_with_buttons))

    app.add_handler(CallbackQueryHandler(handle_button_click))

    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice))

    app.run_polling()


if __name__ == "__main__":
    main()
